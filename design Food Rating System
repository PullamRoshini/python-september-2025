class FoodRatings:
    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):
        self.food_to_cuisine = {}
        self.food_to_rating = {}
        self.cuisine_heaps = {}
        for f, c, r in zip(foods, cuisines, ratings):
            self.food_to_cuisine[f] = c
            self.food_to_rating[f] = r
            if c not in self.cuisine_heaps:
                self.cuisine_heaps[c] = []
            heapq.heappush(self.cuisine_heaps[c], (-r, f))
    def changeRating(self, food: str, newRating: int) -> None:
        cuisine = self.food_to_cuisine[food]
        self.food_to_rating[food] = newRating
        heapq.heappush(self.cuisine_heaps[cuisine], (-newRating, food))
    def highestRated(self, cuisine: str) -> str:
        heap = self.cuisine_heaps[cuisine]
        while heap:
            neg_r, name = heap[0]
            current_rating = self.food_to_rating[name]
            if -neg_r != current_rating:
                heapq.heappop(heap)
            else:
                return name
        return ""
