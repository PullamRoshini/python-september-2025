class TaskManager:
    import heapq
    def __init__(self, tasks: List[List[int]]):
        self.heap = []
        self.task_map = {}
        for userId,taskId,priority in tasks:
            self.add(userId,taskId,priority)

    def add(self, userId: int, taskId: int, priority: int) -> None:
        self.task_map[taskId] = (userId,priority)
        heapq.heappush(self.heap,(-priority,-taskId,taskId))

    def edit(self, taskId: int, newPriority: int) -> None:
        if taskId in self.task_map:
            userId,_ = self.task_map[taskId]
            self.task_map[taskId] = (userId,newPriority)
            heapq.heappush(self.heap,(-newPriority,-taskId,taskId))

    def rmv(self, taskId: int) -> None:
        if taskId in self.task_map:
            del self.task_map[taskId]

    def execTop(self) -> int:
        while self.heap:
            negpriority,negTaskId,taskId = heapq.heappop(self.heap)
            if taskId in self.task_map:
                userId,currPriority = self.task_map[taskId]
                if -negpriority == currPriority:
                    del self.task_map[taskId]
                    return userId
        return -1
